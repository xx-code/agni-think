services:
  web:
    container_name: web
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE=http://api:${API_PORT}/v1
    build:
      context: .
      dockerfile: ./apps/agni-web/dockerfile
    restart: always
    ports:
      - "${WEB_PORT}:80"
    depends_on:
      api:
        condition: service_started
    networks:
      - agni
  api:
    container_name: api
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - PORT=${API_PORT}
      - DB_CLIENT=pg #postgre
      - DB_NAME=${DB_NAME}    
      - RUN_MIGRATION=true
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - API_AGENT_URL=http://agent:8000 
    user: node
    build:
      context: .
      dockerfile: ./apps/agni-server/dockerfile
    restart: always
    ports:
      - "${API_PORT}:${API_PORT}" # setup in variable
    depends_on:
      agent:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - agni
  agent:
    container_name: agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    build:
      context: ./apps/ia-agent
    restart: always
    ports:
      - "8000:8000"
    networks:
      - agni
  db:
    container_name: db
    image: postgres:17-alpine
    restart: always
    shm_size: 128mb
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - agni_data:/var/lib/postgresql/data
    networks:
      - agni
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks: 
      - agni
volumes:
  agni_data: 
networks:
  agni:
    driver: bridge